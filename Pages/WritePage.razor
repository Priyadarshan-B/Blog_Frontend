@page "/blog"
@inject HttpClient Http
@inject IJSRuntime JS

@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers

@inject AppConfiguration AppConfig

@inject NavigationManager Navigation
@using Blog_Web.Services
@using Blog_Web.Shared
@using System.Net.Http.Json
@using MudBlazor
@inject AuthService AuthService
@inject ISnackbar Snackbar

<PageTitle>Create Post</PageTitle>

<MudPaper Class="p-6 mx-auto mt-4" Style="max-width: 800px; padding: 20px; border-radius: 8px; ">
    <MudText Typo="Typo.h5" Class="mb-4">Write a New Blog Post</MudText>

    <MudTextField @bind-Value="Title"
                  Label="Title"
                  Variant="Variant.Outlined"
                  FullWidth="true"
                  Required="true"
                  RequiredError="Title is required!" />

<MudText Typo="Typo.subtitle1" Class="mt-4">Content</MudText>

<div id="editor" style="height: 300px; margin-top: 10px; padding: 10px; border-radius: 5px;"></div>

    @* <MudTextField @bind-Value="Content"
                  Label="Content"
                  Variant="Variant.Outlined"
                  FullWidth="true"
                  Lines="10"
                  TextArea="true"
                  Class="mt-4"
                  Required="true"
                  RequiredError="Content is required!" /> *@

<MudSelect T="string"
           Label="Select Preference"
           @bind-Value="SelectedPreference"
           Variant="Variant.Outlined"
           Required="true"
           RequiredError="Preference is required!"
           Class="mt-4"
           FullWidth="true">
    @if (Preferences != null)
    {
        @foreach (var pref in Preferences)
        {
            <MudSelectItem Value="@pref.Topic">@pref.Topic</MudSelectItem>
        }
    }
</MudSelect>
    <MudDivider Class="my-4" />

    <MudText Typo="Typo.subtitle1" GutterBottom="true">Upload Image</MudText>

    <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelectedMud" Accept=".jpg,.jpeg,.png">
        <ActivatorContent>
            <MudFab Color="Color.Primary"
            Size="Size.Small"
                    StartIcon="@Icons.Material.Filled.Image"
                    Label="Select Image" />
        </ActivatorContent>
    </MudFileUpload>

    @if (SelectedFile != null)
    {
        <MudText Typo="Typo.body2" Class="mt-2">Selected file: @SelectedFile.Name</MudText>
    }

    @if (!string.IsNullOrEmpty(PreviewUrl))
    {
        <img src="@PreviewUrl"
             alt="Image Preview"
             class="my-2"
             style="max-width: 100%; height: 100%; border-radius: 8px;" />
    }

    <MudFab OnClick="SubmitPost"
            Variant="Variant.Outlined"
            Color="Color.Success"
            Class="mt-4 float-right"
            Size="Size.Small"
            StartIcon="@Icons.Material.Rounded.Send"
            Label="Publish"
            />
</MudPaper>

@code {

    private string Title = string.Empty;
    private string Content = string.Empty;
    private IBrowserFile? SelectedFile;
    private string? PreviewUrl;
    private string? SelectedPreference;
private List<Preference> Preferences = new();
    private string HtmlContent = "";

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await JS.InvokeVoidAsync("quillEditor.init");
    }
}

    private async Task HandleFileSelectedMud(IBrowserFile file)
    {
        SelectedFile = file;

        if (SelectedFile != null && SelectedFile.Size <= 5 * 1024 * 1024) // Limit preview size to 5MB
        {
            try
            {
                var buffer = new byte[SelectedFile.Size];
                await SelectedFile.OpenReadStream().ReadAsync(buffer);
                var base64 = Convert.ToBase64String(buffer);
                PreviewUrl = $"data:{SelectedFile.ContentType};base64,{base64}";
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error reading file for preview: {ex.Message}", Severity.Error);
                Console.Error.WriteLine($"Error reading file for preview: {ex.Message}");
                PreviewUrl = null;
                SelectedFile = null;
            }
        }
        else if (SelectedFile != null && SelectedFile.Size > 5 * 1024 * 1024)
        {
            Snackbar.Add("File too large for preview. Maximum 5MB.", Severity.Warning);
            SelectedFile = null;
            PreviewUrl = null;
        }
    }

    private async Task SubmitPost()
    {
            HtmlContent = await JS.InvokeAsync<string>("quillEditor.getContent");

        
        if (string.IsNullOrWhiteSpace(Title))
        {
            Snackbar.Add("Title is required!", Severity.Warning);
            return;
        }

           if (string.IsNullOrWhiteSpace(HtmlContent) || HtmlContent == "<p><br></p>")
    {
        Snackbar.Add("Content is required!", Severity.Warning);
        return;
    }

        var content = new MultipartFormDataContent();

        content.Add(new StringContent(Title), "Title");
        content.Add(new StringContent(HtmlContent), "Content");

        if (!string.IsNullOrWhiteSpace(AuthService.UserId))
        {
            content.Add(new StringContent(AuthService.UserId), "UserId");
        }
        if (!string.IsNullOrWhiteSpace(AuthService.UserName))
        {
            content.Add(new StringContent(AuthService.UserName), "AuthorName");
        }
        if (string.IsNullOrWhiteSpace(SelectedPreference))
{
    Snackbar.Add("Please select a preference/topic.", Severity.Warning);
    return;
}
var preferencesJson = JsonSerializer.Serialize(new List<string> { SelectedPreference });
content.Add(new StringContent(preferencesJson, Encoding.UTF8, "application/json"), "Preferences");


        if (SelectedFile != null)
        {
            var maxAllowedSize = 5 * 1024 * 1024;
            if (SelectedFile.Size > maxAllowedSize)
            {
                Snackbar.Add("Image file is too large (max 5MB).", Severity.Error);
                return;
            }

            try
            {
                var stream = SelectedFile.OpenReadStream(maxAllowedSize: maxAllowedSize);
                var streamContent = new StreamContent(stream);
                streamContent.Headers.ContentType = new MediaTypeHeaderValue(SelectedFile.ContentType);
                content.Add(streamContent, "imageFile", SelectedFile.Name);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error attaching image: {ex.Message}", Severity.Error);
                Console.Error.WriteLine($"Error attaching image: {ex.Message}");
                return;
            }
        }

        var apiUrl = "/api/post";

        try
        {
            var response = await Http.PostAsync(apiUrl, content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Post published successfully!", Severity.Success);
                Navigation.NavigateTo("/post");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error creating post: {error}", Severity.Error);
                Console.Error.WriteLine($"Error creating post: {error}");
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Network error: Could not connect to the API. Is it running? {ex.Message}", Severity.Error);
            Console.Error.WriteLine($"Network error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
            Console.Error.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
    protected override async Task OnInitializedAsync()
{
    await LoadPreferences();
}

private async Task LoadPreferences()
{
    try
    {
        Preferences = await Http.GetFromJsonAsync<List<Preference>>("/api/preferences") ?? new();
    }
    catch (Exception ex)
    {
        Snackbar.Add("Failed to load preferences.", Severity.Error);
        Console.Error.WriteLine($"Error loading preferences: {ex.Message}");
    }
    } 
}