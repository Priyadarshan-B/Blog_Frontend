@page "/profile"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IDialogService DialogService


@using System.Net.Http.Json
@using MudBlazor
@using Blog_Web.Services

<div class="profile-flex">
    <div class="user-profile">
        <MudPaper Class="profile-card" Elevation="6">
            <div class="profile-content">
                <div class="image-section">
                    <img src="@editUser.PictureUrl" alt="Profile" class="profile-image"
                        onerror="this.src='/images/default-profile.png'" />
                    <label class="image-edit-icon">
                        <MudIcon Icon="@Icons.Material.Filled.CameraAlt" />
                        <InputFile style="display:none" OnChange="@OnImageSelected" />
                    </label>
                    @if (selectedImageFile != null)
                    {
                        <div class="img-btns" @key="selectedImageFile">
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateImage" />
                            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel"
                                OnClick="CancelImageEdit" />
                        </div>
                    }
                </div>
                <div class="info-section">
                    <div class="info-header">
                        <MudText Typo="Typo.h5">My Profile</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="ToggleEdit" />
                    </div>
                    @if (isEditing)
                    {
                        <MudTextField @bind-Value="editUser.DisplayName" Label="Name" Class="mb-2" />
                        <MudTextField @bind-Value="editUser.Email" Label="Email" Class="mb-2" />
                        <div class="action-btns">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateBasicDetails"
                                Disabled="@isSaving">Save</MudButton>
                            <MudButton Variant="Variant.Outlined" OnClick="CancelEdit">Cancel</MudButton>
                        </div>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1"> @(editUser.DisplayName ?? "N/A")</MudText>
                        <MudText Typo="Typo.subtitle1"> @(editUser.Email ?? "N/A")</MudText>
                    }
                </div>
            </div>
        </MudPaper>
    </div>

    <div class="follows-card">
        <MudPaper Class="follow-section" Elevation="3">
            <MudTabs>
                <MudTabPanel Text=@($"Followers ({followers.Count})")>
                    <div class="follow-list">
                        @foreach (var user in followers)
                        {
                            <div class="follow-card">
                                <img src="@user.PictureUrl" onerror="this.src='/images/default-profile.png'" />
                                <div class="follow-info">
                                    <p class="name">@user.DisplayName</p>
                                    <p class="email">@user.Email</p>
                                </div>
                            </div>
                        }
                    </div>
                </MudTabPanel>
                <MudTabPanel Text=@($"Following ({following.Count})")>
                    <div class="follow-list">
                        @foreach (var user in following)
                        {
                            <div class="follow-card">
                                <img src="@user.PictureUrl" onerror="this.src='/images/default-profile.png'" />
                                <div class="follow-info">
                                    <p class="name">@user.DisplayName</p>
                                    <p class="email">@user.Email</p>
                                </div>
                            </div>
                        }
                    </div>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </div>
</div>

<div class="post-preference">

    <div class="blog-wrapper">
        <MudText Typo="Typo.h4">Your Posts</MudText>

        @if (posts == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (!posts.Any())
        {
            <MudText>No posts found.</MudText>
        }
        else
        {
            @foreach (var post in posts)
            {
                <div class="blog-card" @onclick="() => NavigateToBlog(post.Id)">
                    @if (!string.IsNullOrEmpty(post.ImageUrl))
                    {
                        <div class="blog-thumbnail">
                            <img src="@post.ImageUrl" alt="Post Image" />
                        </div>
                    }
                    <div class="blog-details">
                        <h2 class="blog-title">@post.Title</h2>
                        <p class="blog-meta">@post.AuthorName â€¢ @post.CreatedAt.ToLocalTime().ToString("g")</p>
                        <p class="blog-summary">
                            @((MarkupString)(post.Content.Length > 150 ? post.Content.Substring(0, 150) + "..." : post.Content))
                        </p>
                        <div class="blog-interactions">
                            <span>
                                <MudIcon Icon="@Icons.Material.Filled.ThumbUp" /> @post.Likes
                            </span>
                            <span>
                                <MudIcon Icon="@Icons.Material.Filled.Comment" /> @post.CommentCount
                            </span>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="preferences-container">
        <div class="preferences-header">
            <MudText Typo="Typo.h6">Your Preferences</MudText>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small"
                OnClick="@(() => isDialogOpen = !isDialogOpen)" />
        </div>
<br>
        @if (userPreferences?.Preferences != null && userPreferences.Preferences.Any())
        {
            <MudPaper Class="preferences-box" Elevation="3">
                <MudChipSet T="Color" Class="chip-set" MultiSelection="false">
                    @foreach (var pref in userPreferences.Preferences)
                    {
                        <MudChip Color="Color.Primary" Class="chip">@pref</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="preferences-box" Elevation="3">
                <MudText>No preferences yet.</MudText>
            </MudPaper>
        }
    </div>

    <MudPopover Open="@isDialogOpen" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopRight" Paper="false">
        <MudPaper Class="popover-content ">
            <MudText Typo="Typo.h6">Add Preferences</MudText>
            <MudSelect T="string" Label="Select Topics" @bind-SelectedValues="selectedTopics" MultiSelection="true"
                Class="w-100 mt-2" ShrinkLabel Clearable>
                @foreach (var topic in allTopics)
                {
                    <MudSelectItem Value="@topic">@topic</MudSelectItem>
                }
            </MudSelect>
            <div class="mt-4 d-flex justify-end gap-2">
                <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitPreferences">Save</MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => isDialogOpen = false)">Cancel</MudButton>
            </div>
        </MudPaper>
    </MudPopover>

</div>



@code {
    private UserProfile editUser = new();
    private UserProfile originalUser = new();
    private bool isSaving = false;
    private bool isEditing = false;
    private IBrowserFile? selectedImageFile;
    private List<FollowUser> followers = new();
    private List<FollowUser> following = new();
    private List<Post>? posts;
    private UserPreference? userPreferences;
    private IEnumerable<string> selectedTopics = new List<string>();
    private List<string> allTopics = new();
    private bool isDialogOpen = false;


    protected override async Task OnInitializedAsync()
    {
        originalUser = new UserProfile
        {
            Id = AuthService.UserId,
            Email = AuthService.Email,
            DisplayName = AuthService.UserName,
            PictureUrl = AuthService.ProfileImage
        };

        editUser = CloneUser(originalUser);
        await LoadFollowersAndFollowing();
        await LoadUserPosts();
        await LoadUserPreference();
        await LoadAvailableTopics();
    }

    private void ToggleEdit() => isEditing = true;
    private void CancelEdit()
    {
        isEditing = false;
        editUser = CloneUser(originalUser);
    }

    private void CancelImageEdit()
    {
        selectedImageFile = null;
        editUser.PictureUrl = originalUser.PictureUrl;
    }

    private async Task UpdateBasicDetails()
    {
        isSaving = true;

        var payload = new Dictionary<string, string>();
        if (editUser.DisplayName != originalUser.DisplayName)
            payload["displayName"] = editUser.DisplayName;
        if (editUser.Email != originalUser.Email)
            payload["email"] = editUser.Email;

        if (payload.Count == 0)
        {
            Snackbar.Add("No changes detected.", Severity.Info);
            isSaving = false;
            return;
        }

        var response = await Http.PatchAsJsonAsync($"http://localhost:5000/api/User/{editUser.Id}/basic", payload);
        isSaving = false;

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Profile updated.", Severity.Success);
            originalUser = CloneUser(editUser);
            AuthService.UpdateProfile(editUser.DisplayName, editUser.Email, originalUser.PictureUrl);
            isEditing = false;
        }
        else
        {
            Snackbar.Add("Failed to update profile info.", Severity.Error);
        }
    }

    private async Task UpdateImage()
    {
        if (selectedImageFile == null) return;

        var content = new MultipartFormDataContent();
        var stream = selectedImageFile.OpenReadStream(5 * 1024 * 1024);
        content.Add(new StreamContent(stream), "imageFile", selectedImageFile.Name);

        var response = await Http.PatchAsync($"http://localhost:5000/api/User/{editUser.Id}/image", content);

        if (response.IsSuccessStatusCode)
        {
            var buffer = new byte[selectedImageFile.Size];
            await selectedImageFile.OpenReadStream().ReadAsync(buffer);
            var base64Image = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

            editUser.PictureUrl = base64Image;
            originalUser.PictureUrl = base64Image;
            Snackbar.Add("Profile image updated.", Severity.Success);
            AuthService.UpdateProfile(originalUser.DisplayName, originalUser.Email, base64Image);
        }
        else
        {
            Snackbar.Add("Failed to update profile image.", Severity.Error);
        }

        selectedImageFile = null;
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;

        if (selectedImageFile != null)
        {
            var buffer = new byte[selectedImageFile.Size];
            await selectedImageFile.OpenReadStream().ReadAsync(buffer);
            var base64Image = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            editUser.PictureUrl = base64Image;
        }
    }

    private async Task LoadFollowersAndFollowing()
    {
        try
        {
            var userId = AuthService.UserId;
            var followersResponse = await
            Http.GetFromJsonAsync<FollowResponse>($"http://localhost:5000/api/follower/{userId}/followers");
            var followingResponse = await
            Http.GetFromJsonAsync<FollowResponse>($"http://localhost:5000/api/follower/{userId}/following");

            followers = followersResponse?.Followers ?? new();
            following = followingResponse?.Following ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load followers/following.", Severity.Error);
            Console.Error.WriteLine(ex.Message);
        }
    }

    private async Task LoadUserPosts()
    {
        var userId = AuthService.UserId;

        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>($"/api/Post/user/{userId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new();
        }
    }
    private async Task LoadUserPreference()
    {
        var userId = AuthService.UserId;
        try
        {
            userPreferences = await Http.GetFromJsonAsync<UserPreference>($"/api/UserPreference/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error Fetching UserPreference: {ex.Message}");
            userPreferences = new UserPreference();
        }
    }

    private async Task LoadAvailableTopics()
    {
        var preferences = await Http.GetFromJsonAsync<List<Preference>>("http://localhost:5000/api/preferences");
        allTopics = preferences?.Select(p => p.Topic).Distinct().ToList() ?? new();
    }

    private async Task SubmitPreferences()
    {
        var userId = AuthService.UserId;
        var response = await Http.PostAsJsonAsync($"http://localhost:5000/api/UserPreference/{userId}", selectedTopics);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Preferences updated!", Severity.Success);
            isDialogOpen = false;
            selectedTopics = new List<string>();
            await LoadUserPreference();
        }
        else
        {
            Snackbar.Add("Failed to update preferences.", Severity.Error);
        }
    }
    private void NavigateToBlog(string postId)
    {
        Navigation.NavigateTo($"/blogpage/{postId}");
    }
    private UserProfile CloneUser(UserProfile u) => new()
    {
        Id = u.Id,
        Email = u.Email,
        DisplayName = u.DisplayName,
        PictureUrl = u.PictureUrl
    };

    public class UserProfile
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string PictureUrl { get; set; } = string.Empty;
    }

    public class FollowUser
    {
        public string Id { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PictureUrl { get; set; } = string.Empty;
        public int FollowersCount { get; set; }
        public int FollowingCount { get; set; }
    }

    public class FollowResponse
    {
        public int Count { get; set; }
        public List<FollowUser> Followers { get; set; } = new();
        public List<FollowUser> Following { get; set; } = new();
    }
    public class Preference
    {
        public string Id { get; set; }
        public string Category { get; set; }
        public string Topic { get; set; }
    }
}
