@page "/login"
@using System.Text.Json.Serialization
@using Blog_Web.Services
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation



<div class="login-container">
    <MudText Typo="Typo.h4" Class="mb-4">Login to Your Account</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">
        Use your Google account to sign in and start sharing your stories.
    </MudText>
        
    <div id="googleSignInBtn"></div>
</div>

@code {
    private DotNetObjectReference<Login>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("googleLogin.initialize",
            "598155518602-f5ci4vkj1i84siubr7ad3gd4fn00sonh.apps.googleusercontent.com", objRef);
        }
    }

    [JSInvokable("OnGoogleLogin")]
    public async Task OnGoogleLogin(string idToken)
    {
        var reqpayload = new { IdToken = idToken };
        var response = await Http.PostAsJsonAsync("/api/auth/google", reqpayload);

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserResponse>();

            if (user != null && !string.IsNullOrEmpty(user.JwtToken))
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "D!", user.JwtToken);
                Navigation.NavigateTo("/post");
            }
        }
        else
        {
            Console.Error.WriteLine("Google sign-in failed: " + await response.Content.ReadAsStringAsync());
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    public class UserResponse
    {
         [JsonPropertyName("token")]
        public string? JwtToken { get; set; }
    }
}
