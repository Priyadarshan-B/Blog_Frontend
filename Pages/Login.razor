@page "/login"
@inject HttpClient Http

@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Login with Google</h3>

<div id="googleSignInBtn"></div>

@code {
    private DotNetObjectReference<Login>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("googleLogin.initialize", "598155518602-f5ci4vkj1i84siubr7ad3gd4fn00sonh.apps.googleusercontent.com", objRef);
        }
    }

    [JSInvokable("OnGoogleLogin")]
    public async Task OnGoogleLogin(string idToken)
    {
        // Send the idToken (JWT) to backend
        var response = await Http.PostAsJsonAsync("api/auth/google", idToken);

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<UserResponse>();

            if (user != null)
            {
                // Store user info + token in localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "userid", user.Id);
                await JS.InvokeVoidAsync("localStorage.setItem", "username", user.DisplayName);
                await JS.InvokeVoidAsync("localStorage.setItem", "email", user.Email);
                await JS.InvokeVoidAsync("localStorage.setItem", "jwt_token", user.JwtToken ?? "");

                // Navigate to post page
                Navigation.NavigateTo("/post");
            }
        }
        else
        {
            // Handle failure
            Console.Error.WriteLine("Google sign-in failed: " + await response.Content.ReadAsStringAsync());
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    public class UserResponse
    {
        public string Id { get; set; } = default!;
        public string DisplayName { get; set; } = default!;
        public string Email { get; set; } = default!;
        public string? JwtToken { get; set; } = default!;
    }
}
