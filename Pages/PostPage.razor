@page "/post"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject AppConfiguration AppConfig

@using Blog_Web.Services
@using Blog_Web.Shared

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">For You</MudText>

    <div class="page-layout">
        <div class="post-list">
            @if (posts == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!posts.Any())
            {
                <MudText>No posts found.</MudText>
            }
            else
            {
                @foreach (var post in posts)
                {
                    <div class="post-card" @onclick="() => NavigateToBlog(post.Id)">
                        <div class="post-left">
                            <MudText Typo="Typo.h6" Class="post-title">@post.Title</MudText>
                            <MudText Class="post-meta">@post.AuthorName - @post.CreatedAt.ToLocalTime().ToString("g")</MudText>
                            <MudText Typo="Typo.body1">
                                @((MarkupString)(post.Content.Length > 120 ? post.Content.Substring(0, 120) + "..." : post.Content))
                            </MudText>
                            <div class="post-actions">
                                <div class="comment-actions">
                                    <MudIcon Icon="@Icons.Material.Filled.ThumbUp" />
                                    <MudText Class="comment-text">@post.Likes Likes</MudText>
                                </div>
                                <div class="comment-actions">
                                    <MudIcon Icon="@Icons.Material.Filled.Comment" />
                                    <MudText Class="comment-text">@post.CommentCount Comments</MudText>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <div class="post-right">
                                <img src="@post.ImageUrl" alt="Post Image" class="post-img" />
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <div class="suggestions-card">
            <MudText Typo="Typo.h6">Suggestions</MudText>
            <MudText Typo="Typo.body2">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae sapien ut turpis commodo convallis. Sed non nibh ut erat.
            </MudText>
        </div>
    </div>
</MudContainer>


@code {
    private List<Post>? posts;

    protected override async Task OnInitializedAsync()
    {
       
            await RefreshPosts();
        
    }

     private async Task RefreshPosts()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("/api/post") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new();
        }
    }

    private void NavigateToBlog(string postId)
    {
        Navigation.NavigateTo($"/blogpage/{postId}");
    }
}
