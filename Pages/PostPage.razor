@page "/post"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject AppConfiguration AppConfig
@inject IDialogService DialogService


@using Blog_Web.Services
@using Blog_Web.Shared
@using System.Text
<MudFab StartIcon="@Icons.Material.Filled.ChatBubble" Color="Color.Secondary" Class="chat" OnClick="ToggleChat" />
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">For You</MudText>

    <div class="page-layout">
        <div class="post-list">
            @if (posts == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!posts.Any())
            {
                <MudText>No posts found.</MudText>
            }
            else
            {
                @foreach (var post in posts)
                {
                    <div class="post-card" @onclick="() => NavigateToBlog(post.Id)">
                        <div class="post-left">
                            <MudText Typo="Typo.h6" Class="post-title">@post.Title</MudText>
                            <MudText Class="post-meta">@post.AuthorName - @post.CreatedAt.ToLocalTime().ToString("g")</MudText>
                            <MudText Typo="Typo.body1">
                                @((MarkupString)(post.Content.Length > 120 ? post.Content.Substring(0, 120) + "..." : post.Content))
                            </MudText>
                            <div class="post-actions">
                                <div class="comment-actions">
                                    <MudIcon Icon="@Icons.Material.Filled.ThumbUp" />
                                    <MudText Class="comment-text">@post.Likes Likes</MudText>
                                </div>
                                <div class="comment-actions">
                                    <MudIcon Icon="@Icons.Material.Filled.Comment" />
                                    <MudText Class="comment-text">@post.CommentCount Comments</MudText>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <div class="post-right">
                                <img src="@post.ImageUrl" alt="Post Image" class="post-img" />
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <div class="suggestions-card">
            <MudText Typo="Typo.h6">Suggestions</MudText>
            <MudText Typo="Typo.body2">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae sapien ut turpis commodo convallis. Sed non nibh ut erat.
            </MudText>
        </div>
    </div>
</MudContainer>
@* chat bot *@
<MudPopover Open="_isOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
    <MudPaper Class="chat-box" Style="width: 300px; padding: 16px;">
        <MudText Typo="Typo.h6" GutterBottom="true">ChatBot Assistant</MudText>

        <MudPaper Class="chat-messages" Style="max-height: 200px; overflow-y: auto; background: #f8f8f8; padding: 8px; margin-bottom: 8px;">
            @foreach (var message in messages)
            {
                <MudText Typo="Typo.body2">@message</MudText>
            }

            @if (isLoading)
            {
                <MudProgressCircular Size="Size.Small" Color="Color.Primary" Class="d-block mx-auto mt-2" />
            }
        </MudPaper>

        <MudTextField @bind-Value="inputText" Placeholder="Ask something..." FullWidth="true" />
        <MudButton OnClick="SendMessage" Color="Color.Primary" Class="mt-2" FullWidth="true">Send</MudButton>
    </MudPaper>
</MudPopover>



@code {
    private List<Post>? posts;
    private bool _isOpen = false;
    private string inputText = string.Empty;
    private List<string> messages = new();
        private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
       
            await RefreshPosts();
        
    }

     private async Task RefreshPosts()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("/api/post") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new();
        }
    }

    private void NavigateToBlog(string postId)
    {
        Navigation.NavigateTo($"/blogpage/{postId}");
    }
void ToggleChat()
    {
        _isOpen = !_isOpen;
    }

    async Task SendMessage()
{
    if (string.IsNullOrWhiteSpace(inputText)) return;

    messages.Add("You: " + inputText);
    isLoading = true;

    try
    {
       var jsonText = $"{{ \"query\": \"{inputText}\" }}";

        var content = new StringContent(jsonText, Encoding.UTF8, "text/plain");

        var response = await Http.PostAsync("http://localhost:5182/Search/search", content);


        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadFromJsonAsync<SummaryResponse>();
            if (json?.summary != null)
                messages.Add("Bot: " + json.summary);
            else
                messages.Add("Bot: No summary found.");
        }
        else
        {
            messages.Add("Bot: Something went wrong.");
        }
    }
    catch (Exception ex)
    {
        messages.Add("Bot: Error occurred.");
        Console.WriteLine(ex.Message);
    }

    inputText = string.Empty;
    isLoading = false;
}


    public class SummaryResponse
    {
        public string summary { get; set; }
    }
}
