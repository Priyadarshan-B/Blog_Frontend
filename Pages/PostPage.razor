@page "/post"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject AppConfiguration AppConfig
@inject IDialogService DialogService


@using Blog_Web.Services
@using Blog_Web.Shared
@using System.Text
<MudFab StartIcon="@Icons.Material.Filled.ChatBubble" Color="Color.Secondary" Class="chat-button"
    OnClick="ToggleChat" />
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">For You</MudText>

    <div class="page-layout">
        <div class="post-list">
            @if (posts == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!posts.Any())
            {
                <MudText>No posts found.</MudText>
            }
            else
            {
                @foreach (var post in posts)
                {
                    <div class="post-card" @onclick="() => NavigateToBlog(post.Id)">
                        <div class="post-left">
                            <MudText Typo="Typo.h6" Class="post-title">@post.Title</MudText>
                            <MudText Class="post-meta">@post.AuthorName - @post.CreatedAt.ToLocalTime().ToString("g")</MudText>
                            <MudText Typo="Typo.body1">
                                @((MarkupString)(post.Content.Length > 120 ? post.Content.Substring(0, 120) + "..." :
                                                        post.Content))
                    </MudText>
                    <div class="post-actions">
                        <div class="comment-actions">
                            <MudIcon Icon="@Icons.Material.Filled.ThumbUp" />
                            <MudText Class="comment-text">@post.Likes Likes</MudText>
                        </div>
                        <div class="comment-actions">
                            <MudIcon Icon="@Icons.Material.Filled.Comment" />
                            <MudText Class="comment-text">@post.CommentCount Comments</MudText>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <div class="post-right">
                                <img src="@post.ImageUrl" alt="Post Image" class="post-img" />
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <div class="suggestions-card">
            <MudText Typo="Typo.h6">Suggestions</MudText>
            <MudText Typo="Typo.body2">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae sapien ut turpis commodo
                convallis. Sed non nibh ut erat.
            </MudText>
        </div>
    </div>
</MudContainer>
@* chat bot *@
<MudPopover Open="_isOpen" class="chat" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.CenterLeft"
    TransformOrigin="Origin.TopCenter">
    <MudPaper Class="chat-box">
        <MudText Typo="Typo.h6" GutterBottom="true">ChatBot Assistant</MudText>

        <div class="chat-body">
            <div class="chat-messages">
                @foreach (var message in messages)
                {
                    <div class="chat-message">
                        <MudText Typo="Typo.body2">@message</MudText>
                    </div>
                }

                @if (isLoading)
                {
                    <div class="chat-message bot-thinking d-flex align-items-center gap-2">
                        <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary"><em>@currentLoadingMessage</em></MudText>
                    </div>
                }

            </div>

            <div class="chat-input">
                <MudTextField @bind-Value="inputText" Placeholder="Ask something..." FullWidth="true" />
                <MudFab Color="Color.Success" OnClick="SendMessage" Size="Size.Medium"
                    StartIcon="@Icons.Material.Filled.Send" />
            </div>
        </div>
    </MudPaper>
</MudPopover>




@code {
    private List<Post>? posts;
    private bool _isOpen = false;
    private string inputText = string.Empty;
    private List<string> messages = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {

        await RefreshPosts();

    }

    private async Task RefreshPosts()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("/api/post") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new();
        }
    }

    private void NavigateToBlog(string postId)
    {
        Navigation.NavigateTo($"/blogpage/{postId}");
    }
    void ToggleChat()
    {
        _isOpen = !_isOpen;
    }
    private List<string> loadingMessages = new()
{
"Bot is thinking...",
"Please wait...",
"Generating response...",
"Analyzing your question...",
"Almost there..."
};

    private string currentLoadingMessage = "Bot is thinking...";
    private System.Timers.Timer loadingMessageTimer;
    private int loadingIndex = 0;
    async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText)) return;

        messages.Add("You: " + inputText);
        inputText = string.Empty;

        StartLoadingAnimation();

        try
        {
            var payload = new { query = inputText };
            var json = System.Text.Json.JsonSerializer.Serialize(payload);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("http://localhost:5182/Search/search", content);
            Console.WriteLine($"Response Status: {response}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SummaryResponse>();
                if (result?.summary != null)
                    messages.Add("Bot: " + result.summary);
                else
                    messages.Add("Bot: No summary found.");
            }
            else
            {
                messages.Add("Bot: Something went wrong.");
            }
        }
        catch (Exception ex)
        {
            messages.Add("Bot: Error occurred.");
            Console.WriteLine(ex.Message);
        }

        StopLoadingAnimation();
    }

    void StartLoadingAnimation()
    {
        isLoading = true;
        loadingIndex = 0;
        currentLoadingMessage = loadingMessages[loadingIndex];

        loadingMessageTimer = new System.Timers.Timer(1000);
        loadingMessageTimer.Elapsed += (sender, args) =>
        {
            loadingIndex = (loadingIndex + 1) % loadingMessages.Count;
            currentLoadingMessage = loadingMessages[loadingIndex];
            InvokeAsync(StateHasChanged);
        };
        loadingMessageTimer.Start();
    }

    void StopLoadingAnimation()
    {
        isLoading = false;
        loadingMessageTimer?.Stop();
        loadingMessageTimer?.Dispose();
        loadingMessageTimer = null;
    }

    public class SummaryResponse
    {
        public string summary { get; set; }
    }
}
