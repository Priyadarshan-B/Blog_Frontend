@page "/blogpage/{PostId}"
@inject HttpClient Http
@inject AuthService AuthService
@using Blog_Web.Services
@using Blog_Web.Shared
@using System.Net.Http.Json

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 blogpage-container" Style="padding: 20px;">
    @if (post == null)
    {
        <div class="loader-center">
            <MudProgressCircular Indeterminate="true" />
        </div>
    }
    else
    {
        <MudPaper Class="post-container p-4" Elevation="1">
    @if (!string.IsNullOrEmpty(post.ImageUrl))
    {
        <img src="@post.ImageUrl" alt="Post Image" class="post-image mb-3" />
    }

    <MudText Typo="Typo.h4" Class="mb-1">@post.Title</MudText>

    <div class="post-meta d-flex align-center justify-between mb-3">
        <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
            Posted by <b>@post.AuthorName</b>
        </MudText>

        <div class="follow-pill" @onclick="ToggleFollow">
            @(isFollowing ? "Unfollow" : "Follow")
        </div>
    </div>

    <MudText Typo="Typo.body1" Class="post-content mb-4">@((MarkupString)post.Content)</MudText>

    <div class="interaction-bar d-flex align-center gap-4 mb-3">
        <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" OnClick="LikePost" />
        <MudText>@post.Likes Likes</MudText>

        <MudIcon Icon="@Icons.Material.Filled.Comment" />
        <MudText>@post.CommentCount Comments</MudText>
    </div>

    <div class="comment-section mt-3">
        <MudTextField @bind-Value="newComment" Label="Write a comment..." Immediate="true"  Class="mb-2" />
        <MudFab OnClick="SubmitComment" Color="Color.Success" Size="Size.Small" StartIcon="@Icons.Material.Filled.Send"
                Disabled="@string.IsNullOrWhiteSpace(newComment)" Label="Reply" />

        @if (comments != null && comments.Any())
        {
            <div class="mt-3">
                @foreach (var comment in comments)
                {
                    <div class="comment mb-2">
                        <b>@comment.AuthorName</b>: @comment.Content
                    </div>
                }
            </div>
        }
    </div>
</MudPaper>

    }
</MudContainer>

@code {
    [Parameter] public string PostId { get; set; } = default!;
    private Post? post;
    private bool isFollowing = false;
    private string newComment = string.Empty;
    private List<Comment> comments = new();

    protected override async Task OnInitializedAsync()
    {
        post = await Http.GetFromJsonAsync<Post>($"/api/post/{PostId}");
        comments = await Http.GetFromJsonAsync<List<Comment>>($"/api/post/{PostId}/comments");

        var followResponse = await Http.GetFromJsonAsync<FollowResponse>(
        $"/api/follower/isfollowing?followerId={AuthService.UserId}&followingId={post.UserId}");

        isFollowing = followResponse?.IsFollowing ?? false;
    }

    private async Task ToggleFollow()
    {
        if (isFollowing)
        {
            await
            Http.PostAsync($"/api/follower/unfollow?followerId={AuthService.UserId}&followingId={post.UserId}",
            null);
        }
        else
        {
            await
            Http.PostAsync($"/api/follower/follow?followerId={AuthService.UserId}&followingId={post.UserId}",
            null);
        }

        isFollowing = !isFollowing;
    }

    private async Task LikePost()
    {
        await Http.PostAsync($"/api/post/{PostId}/like", null);
        post.Likes++;
    }

    private async Task SubmitComment()
    {
        var commentObj = new Comment
        {
            PostId = post.Id,
            UserId = AuthService.UserId,
            AuthorName = AuthService.UserName,
            Content = newComment
        };

        var response = await Http.PostAsJsonAsync($"/api/post/{PostId}/comments", commentObj);
        if (response.IsSuccessStatusCode)
        {
            newComment = string.Empty;
            comments = await Http.GetFromJsonAsync<List<Comment>>($"/api/post/{PostId}/comments");
            post.CommentCount = comments.Count;
        }
    }
    public class FollowResponse
    {
        public bool IsFollowing { get; set; }
    }

}
